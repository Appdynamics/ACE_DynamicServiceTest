/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'stefan.marx' at '15.02.15 11:58' with Gradle 2.1
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at http://gradle.org/docs/2.1/userguide/tutorial_java_projects.html
 */

task wrapper(type: Wrapper) {
    gradleVersion = '2.2'
}

allprojects
{

    apply plugin: 'java'
    apply plugin: 'idea'

    repositories {
        // Use 'maven central' for resolving your dependencies.
        // You can declare any Maven/Ivy/file repository here.
        mavenCentral()
        
        maven {
            url "https://raw.github.com/Appdynamics/artifact-library/master/repo/"
        }
        
        maven {
            url "file:///vlab/maven/private-artifact-library/repo/"
        }

    }

    test.useTestNG()

    dependencies {
   
        testCompile "org.testng:testng:6.8.1"
    }

    compileJava {
        sourceCompatibility = 1.6
        targetCompatibility = 1.6
        // options.bootClasspath = "/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/classes.jar"
    }
}
configurations {
    agentBinary
}

dependencies {
    agentBinary "com.appdynamics:AppServerAgent:4.0.0@zip"
}

task installAgent (type: Copy){
    configurations.agentBinary.filter { it.toString().endsWith(".zip") }.each{
        from zipTree(it)
    }
    into 'build/sandbox/agent'
}


task fullInstall () {

    doLast() {
        println()
        copy {
            from('src/main/shell') {
                include '**/*.sh'
            }


            into "build/sandbox"
        }


        copy {
            from project(":TestApplication").file("build/install/TestApp")
            into "build/sandbox/TestApp"
        }

        def f = new File("build/sandbox/agent");

        f = f.listFiles().find { file->
            file.name.startsWith("ver")
        }.getAbsoluteFile()
        f = new File(f,"external-services")
        f.mkdirs();


        copy {
            from project(":DynamicMetricService").file("build/obfuscated/DynamicMetricService_agent_4_0_0.jar")
            into f.absolutePath+"/dynamicMetric"
        }
        copy {
            from project(":DynamicInstrumentationService").file("build/obfuscated/DynamicInstrumentationService_agent_4_0_0.jar")
            into f.absolutePath+"/dynamicInstrumentation"
        }
    }
}

// Dependency Chain
// ////////////////
fullInstall.dependsOn( installAgent)
fullInstall.dependsOn( ":TestApplication:installApp")
fullInstall.dependsOn( ":DynamicMetricService:all")
fullInstall.dependsOn( ":DynamicInstrumentationService:all")

build.dependsOn(fullInstall)